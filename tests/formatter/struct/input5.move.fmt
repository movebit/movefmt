module econia::incentives{
  
  // Uses >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  use aptos_framework::aptos_coin::AptosCoin;
  use aptos_framework::coin::{Self, Coin};
  use aptos_std::type_info::{Self, TypeInfo};
  use econia::resource_account;
  use econia::tablist::{Self, Tablist};
  use std::signer::address_of;
  use std::vector;
  
  // Uses <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  
  // Friends >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  friend econia::registry;
  friend econia::market;
  
  // Friends <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  
  // Structs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  /// Portion of taker fees not claimed by an integrator, which are
  /// reserved for Econia.
  struct EconiaFeeStore<phantom QuoteCoinType> has key{
    /// Map from market ID to fees collected for given market,
    /// enabling duplicate checks and iterable indexing.
    map: Tablist<u64, Coin<QuoteCoinType>>
  } 
  
  /// Incentive parameters for assorted operations.
  struct IncentiveParameters has drop, key{
    /// Utility coin type info. Corresponds to the phantom
    /// `CoinType` (`address:module::MyCoin` rather than
    /// `aptos_framework::coin::Coin<address:module::MyCoin>`) of
    /// the coin required for utility purposes. Set to `APT` at
    /// mainnet launch, later the Econia coin.
    utility_coin_type_info: TypeInfo,
    /// `Coin.value` required to register a market.
    market_registration_fee: u64,
    /// `Coin.value` required to register as an underwriter.
    underwriter_registration_fee: u64,
    /// `Coin.value` required to register as a custodian.
    custodian_registration_fee: u64,
    /// Nominal amount divisor for quote coin fee charged to takers.
    /// For example, if a transaction involves a quote coin fill of
    /// 1000000 units and the taker fee divisor is 2000, takers pay
    /// 1/2000th (0.05%) of the nominal amount (500 quote coin
    /// units) in fees. Instituted as a divisor for optimized
    /// calculations.
    taker_fee_divisor: u64,
    /// 0-indexed list from tier number to corresponding parameters.
    integrator_fee_store_tiers: vector<IntegratorFeeStoreTierParameters>
  } 
  
  /// Fee store for a given integrator, on a given market.
  struct IntegratorFeeStore<phantom QuoteCoinType> has store{
    /// Activation tier, incremented by paying utility coins.
    tier: u8,
    /// Collected fees, in quote coins for given market.
    coins: Coin<QuoteCoinType>
  } 
  
  /// All of an integrator's `IntegratorFeeStore`s for given
  /// `QuoteCoinType`.
  struct IntegratorFeeStores<phantom QuoteCoinType> has key{
    /// Map from market ID to `IntegratorFeeStore`, enabling
    /// duplicate checks and iterable indexing.
    map: Tablist<
      u64,
      IntegratorFeeStore<QuoteCoinType>
    >
  } 
  
  /// Integrator fee store tier parameters for a given tier.
  struct IntegratorFeeStoreTierParameters has drop, store{
    /// Nominal amount divisor for taker quote coin fee reserved for
    /// integrators having activated their fee store to the given
    /// tier. For example, if a transaction involves a quote coin
    /// fill of 1000000 units and the fee share divisor at the given
    /// tier is 4000, integrators get 1/4000th (0.025%) of the
    /// nominal amount (250 quote coin units) in fees at the given
    /// tier. Instituted as a divisor for optimized calculations.
    /// May not be larger than the
    /// `IncentiveParameters.taker_fee_divisor`, since the
    /// integrator fee share is deducted from the taker fee (with
    /// the remaining proceeds going to an `EconiaFeeStore` for the
    /// given market).
    fee_share_divisor: u64,
    /// Cumulative cost, in utility coin units, to activate to the
    /// current tier. For example, if an integrator has already
    /// activated to tier 3, which has a tier activation fee of 1000
    /// units, and tier 4 has a tier activation fee of 10000 units,
    /// the integrator only has to pay 9000 units to activate to
    /// tier 4.
    tier_activation_fee: u64,
    /// Cost, in utility coin units, to withdraw from an integrator
    /// fee store. Shall never be nonzero, since a disincentive is
    /// required to prevent excessively-frequent withdrawals and
    /// thus transaction collisions with the matching engine.
    withdrawal_fee: u64
  } 
  
  /// Container for utility coin fees collected by Econia.
  struct UtilityCoinStore<phantom CoinType> has key{
    /// Coins collected as utility fees.
    coins: Coin<CoinType>
  }
}
