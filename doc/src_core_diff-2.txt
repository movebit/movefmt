diff --git a/src/core/fmt.rs b/src/core/fmt.rs
index cb060b0..3526eaf 100644
--- a/src/core/fmt.rs
+++ b/src/core/fmt.rs
@@ -844,7 +844,7 @@ impl Format {
             self.format_context.borrow_mut().cur_tok = *tok;
 
             let mut split_line_after_content = false;
-            if self.judge_change_new_line_when_over_limits(*tok, *note, next_token) {
+            if self.judge_change_new_line_when_over_limits(content.clone(), *tok, *note, next_token) {
                 tracing::debug!("last_line = {:?}", self.last_line());
                 tracing::debug!(
                     "SimpleToken{:?} too long, add a new line because of split line",
@@ -871,17 +871,17 @@ impl Format {
             if new_line_after {
                 return;
             }
-            if self.judge_change_new_line_when_over_limits(*tok, *note, next_token) {
-                tracing::debug!("last_line = {:?}", self.last_line());
-                tracing::debug!(
-                    "SimpleToken{:?}, add a new line because of split line",
-                    content
-                );
-                self.inc_depth();
-                self.new_line(None);
-                self.dec_depth();
-                return;
-            }
+            // if self.judge_change_new_line_when_over_limits(content.clone(), *tok, *note, next_token) {
+            //     tracing::debug!("last_line = {:?}", self.last_line());
+            //     tracing::debug!(
+            //         "SimpleToken{:?}, add a new line because of split line",
+            //         content
+            //     );
+            //     self.inc_depth();
+            //     self.new_line(None);
+            //     self.dec_depth();
+            //     return;
+            // }
             if expr_fmt::need_space(token, next_token) {
                 self.push_str(" ");
             }
@@ -1285,11 +1285,17 @@ impl Format {
 
     fn judge_change_new_line_when_over_limits(
         &self,
+        tok_str: String,
         tok: Tok,
         note: Option<Note>,
         next: Option<&TokenTree>,
     ) -> bool {
-        self.get_cur_line_len() + tok.to_string().len() > self.global_cfg.max_width()
+        if self.get_cur_line_len() + tok_str.len() > self.global_cfg.max_width() {
+            tracing::trace!("self.get_cur_line_len() = {}, tok_str.len() = {}", self.get_cur_line_len(), tok_str.len());
+            tracing::trace!("self.last_line = {}, tok_str = {}", self.last_line(), tok_str);
+        }
+
+        self.get_cur_line_len() + tok_str.len() > self.global_cfg.max_width()
             && Self::tok_suitable_for_new_line(tok, note, next)
     }
 
